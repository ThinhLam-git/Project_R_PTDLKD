
# ---------- ƒê·ªçc v√† ki·ªÉm tra d·ªØ li·ªáu ----------
```{r}
library(readxl)
library(dplyr)
library(ggplot2)
library(tidyr)
library(stringr)
library(reshape2)
library(corrplot)
library(car)
library(randomForest)
library(Rtsne)
library(glmnet)
# ƒê·ªçc d·ªØ li·ªáu t·ª´ file Excel
df <- read_excel("data/processed/SRD_data_cleaned.xlsx")

# Xem th√¥ng tin t·ªïng qu√°t
str(df)
summary(df)
```

# ---------- Nh√≥m c√°c ki·ªÉu d·ªØ li·ªáu ----------

```{r}

# L·∫•y danh s√°ch t·∫•t c·∫£ c√°c c·ªôt
columns <- colnames(df)
print(columns)

# T√°ch v√† nh√≥m c√°c c·ªôt theo SDG
sdg_pattern <- "^sdg(\\d+)_"
sdg_groups <- list()

# Kh·ªüi t·∫°o danh s√°ch r·ªóng cho m·ªói SDG t·ª´ 1-17
for (i in 1:17) {
  sdg_groups[[as.character(i)]] <- c()
}

# Th√™m c√°c c·ªôt v√†o c√°c nh√≥m t∆∞∆°ng ·ª©ng
for (col in columns) {
  match <- regexpr(sdg_pattern, col, perl = TRUE)
  if (match != -1) {
    sdg_num <- gsub(sdg_pattern, "\\1", str_extract(col, sdg_pattern))
    sdg_groups[[sdg_num]] <- c(sdg_groups[[sdg_num]], col)
  }
}


# In th·ªëng k√™ m√¥ t·∫£ cho t·ª´ng bi·∫øn trong t·ª´ng nh√≥m
for (sdg_num in sort(as.numeric(names(sdg_groups)))) {
  cat(sprintf("\nTh·ªëng k√™ m√¥ t·∫£ cho SDG %d:\n", sdg_num))
  cols <- sdg_groups[[as.character(sdg_num)]]
  
  for (col in cols) {
    cat(sprintf("\nTh·ªëng k√™ m√¥ t·∫£ cho c·ªôt '%s':\n", col))
    print(summary(df[[col]]))
  }
  cat(paste(rep("=", 50), collapse = ""), "\n")
}
```

```{r}
# L·ªçc d·ªØ li·ªáu Vi·ªát Nam
df_vietnam <- df[df$Country == "Vietnam", ]

# L·ªçc d·ªØ li·ªáu 2023-2024
df_vietnam_recent <- df_vietnam[df_vietnam$year %in% c(2023, 2024), ]

# In d·ªØ li·ªáu Vi·ªát Nam
cat("D·ªØ li·ªáu Vi·ªát Nam 2023-2024:\n")
print(df_vietnam_recent[, c("year", "SDG Index Score", "sdg1_lmicpov", "sdg7_renewcon", "sdg11_pm25", "sdg4_literacy")])
```

# ---------- Bi·ªÉu ƒë·ªì th·ªÉ hi·ªán t·ª´ng c·ªôt ----------
```{r}
plot_histograms_by_sdg <- function(df, sdg_groups, batch_size = 3, bins = 20) {
  for (sdg_num in sort(as.numeric(names(sdg_groups)))) {
    cat(sprintf("V·∫Ω histogram cho SDG %d\n", sdg_num))
    cols <- sdg_groups[[as.character(sdg_num)]]
    
    for (i in seq(1, length(cols), by = batch_size)) {
      batch <- cols[i:min(i + batch_size - 1, length(cols))]
      num_plots <- length(batch)
      
      # T·∫°o layout cho ƒë·ªì th·ªã
      if (num_plots > 0) {
        par(mfrow = c(1, num_plots))
        for (col in batch) {
          hist(df[[col]], main = col, xlab = "Gi√° tr·ªã c·ªßa bi·∫øn", 
               ylab = "T·∫ßn su·∫•t xu·∫•t hi·ªán", breaks = bins, 
               col = "lightblue", border = "black")
        }
        mtext(sprintf("SDG %d - Histogram cho c√°c bi·∫øn t·ª´ %d ƒë·∫øn %d", 
                     sdg_num, i, i + length(batch) - 1), 
              side = 3, line = -2, outer = TRUE, font = 2)
        par(mfrow = c(1, 1))
      }
    }
  }
}

# G·ªçi h√†m v·∫Ω histograms
plot_histograms_by_sdg(df, sdg_groups)
```

# ---------- X·ª≠ l√≠ c√°c gi√° tr·ªã ngo·∫°i lai ----------
```{r}
detect_outliers_iqr <- function(df, group_cols, num_outliers = 10) {
  outliers_info <- list()
  total_outliers <- 0
  
  for (sdg in sort(as.numeric(names(group_cols)))) {
    cat(sprintf("\nüîç Ki·ªÉm tra SDG %d\n", sdg))
    cols <- group_cols[[as.character(sdg)]]
    
    for (col in cols) {
      # B·ªè qua n·∫øu c·ªôt kh√¥ng t·ªìn t·∫°i trong DataFrame
      if (!(col %in% colnames(df))) {
        cat(sprintf("C·ªôt %s kh√¥ng t·ªìn t·∫°i trong DataFrame\n", col))
        next
      }
      
      # T√≠nh IQR v√† ng∆∞·ª°ng
      Q1 <- quantile(df[[col]], 0.25, na.rm = TRUE)
      Q3 <- quantile(df[[col]], 0.75, na.rm = TRUE)
      IQR <- Q3 - Q1
      
      lower_bound <- Q1 - 1.5 * IQR
      upper_bound <- Q3 + 1.5 * IQR
      
      outliers <- df[df[[col]] < lower_bound | df[[col]] > upper_bound, col]
      num_outliers_found <- length(outliers)
      total_outliers <- total_outliers + num_outliers_found
      
      if (num_outliers_found > 0) {
        cat(sprintf("\n Bi·∫øn: %s\n", col))
        cat(sprintf(" - Q1: %.2f, Q3: %.2f, IQR: %.2f\n", Q1, Q3, IQR))
        cat(sprintf(" - Ng∆∞·ª°ng: [%.2f, %.2f]\n", lower_bound, upper_bound))
        cat(sprintf(" - T·ªïng s·ªë ngo·∫°i lai: %d\n", num_outliers_found))
        
        # L·∫•y 10 gi√° tr·ªã ngo·∫°i lai ƒë·∫ßu ti√™n
        top_outliers <- head(outliers, num_outliers)
        cat(" - ", num_outliers, " gi√° tr·ªã ngo·∫°i lai ƒë·∫ßu ti√™n:\n")
        print(top_outliers)
        
        outliers_info[[col]] <- top_outliers
      } else {
        cat(sprintf("‚úîÔ∏è %s: Kh√¥ng c√≥ ngo·∫°i lai\n", col))
      }
    }
  }
  
  cat(sprintf("\nüìä T·ªïng s·ªë ngo·∫°i lai ph√°t hi·ªán ƒë∆∞·ª£c: %d\n", total_outliers))
  return(outliers_info)
}

outliers_dict <- detect_outliers_iqr(df, sdg_groups)
```

# ---------- Ph√¢n t√≠ch m·ªëi quan h·ªá gi·ªØa c√°c bi·∫øn ----------
```{r}
# Scale d·ªØ li·ªáu b·∫±ng RobustScaler
robust_scale <- function(x) {
  median_val <- median(x, na.rm = TRUE)
  mad_val <- mad(x, na.rm = TRUE)
  if (mad_val == 0) return(x - median_val)
  return((x - median_val) / mad_val)
}

# L∆∞u l·∫°i c√°c c·ªôt kh√¥ng scale
non_numeric_cols <- c("Country", "year")

# L·∫•y c√°c c·ªôt s·ªë
numeric_cols <- names(df)[sapply(df, is.numeric)]
numeric_cols <- setdiff(numeric_cols, non_numeric_cols)

df_scaled <- df
for (col in numeric_cols) {
  df_scaled[[col]] <- robust_scale(df[[col]])
}

# H√†m ƒë√°nh gi√° m·ªëi quan h·ªá d·ª±a tr√™n h·ªá s·ªë t∆∞∆°ng quan
evaluate_correlation <- function(corr_matrix) {
  evaluation <- list()
  
  for (row in rownames(corr_matrix)) {
    for (col in colnames(corr_matrix)) {
      if (row != col) {  # Lo·∫°i b·ªè c√°c c·∫∑p t∆∞∆°ng quan v·ªõi ch√≠nh n√≥
        corr_value <- corr_matrix[row, col]
        pair_key <- paste(row, col, sep = "_")
        
        if (abs(corr_value) >= 0.7) {
          evaluation[[pair_key]] <- "M·ªëi quan h·ªá m·∫°nh"
        } else if (abs(corr_value) >= 0.3) {
          evaluation[[pair_key]] <- "M·ªëi quan h·ªá trung b√¨nh"
        } else {
          evaluation[[pair_key]] <- "M·ªëi quan h·ªá y·∫øu"
        }
      }
    }
  }
  
  return(evaluation)
}

# V·∫Ω heatmap v√† t·ª± ƒë·ªông ƒë√°nh gi√°
for (sdg_name in names(sdg_groups)) {
  sdg_vars <- sdg_groups[[sdg_name]]
  
  # Ch·ªâ x·ª≠ l√Ω n·∫øu c√≥ ƒë·ªß bi·∫øn
  if (length(sdg_vars) > 1) {
    cat(sprintf("\nPh√¢n t√≠ch t∆∞∆°ng quan cho SDG %s\n", sdg_name))
    
    # T√≠nh ma tr·∫≠n t∆∞∆°ng quan
    corr_matrix <- cor(df_scaled[, sdg_vars], use = "pairwise.complete.obs")
    
    # V·∫Ω heatmap
    png(paste0("correlation_sdg", sdg_name, ".png"), width = 800, height = 600)
    corrplot(corr_matrix, method = "color", type = "upper", 
             tl.col = "black", tl.srt = 45, addCoef.col = "black",
             col = colorRampPalette(c("blue", "white", "red"))(100))
    title(paste("Ma tr·∫≠n t∆∞∆°ng quan - SDG", sdg_name))
    dev.off()
    
    # ƒê√°nh gi√° m·ªëi quan h·ªá
    evaluation <- evaluate_correlation(corr_matrix)
    cat("\nƒê√°nh gi√° m·ªëi quan h·ªá:\n")
    for (pair in names(evaluation)) {
      var_names <- strsplit(pair, "_")[[1]]
      cat(sprintf("%s v√† %s: %s\n", var_names[1], var_names[2], evaluation[[pair]]))
    }
    cat(paste(rep("=", 50), collapse = ""), "\n")
  }
}

# T√≠nh trung b√¨nh c√°c ch·ªâ s·ªë theo t·ª´ng nh√≥m SDG
for (sdg_num in sort(as.numeric(names(sdg_groups)))) {
  sdg_name <- as.character(sdg_num)
  cols <- sdg_groups[[sdg_name]]
  
  # T√≠nh trung b√¨nh cho c√°c ch·ªâ s·ªë c·ªßa nh√≥m SDG
  df[[paste0("SDG", sdg_num, "_Index")]] <- rowMeans(df[, cols], na.rm = TRUE)
  
  # In ra d√≤ng ƒë·∫ßu ti√™n c·ªßa DataFrame sau khi t√≠nh trung b√¨nh
  cat(sprintf("Trung b√¨nh cho nh√≥m SDG%d (d√≤ng ƒë·∫ßu ti√™n):\n", sdg_num))
  print(head(df[, paste0("SDG", sdg_num, "_Index"), drop = FALSE], 1))
  cat(paste(rep("=", 50), collapse = ""), "\n")
}

# T√≠nh ma tr·∫≠n t∆∞∆°ng quan cho c√°c ch·ªâ s·ªë SDG
sdg_index_cols <- paste0("SDG", sort(as.numeric(names(sdg_groups))), "_Index")
corr_matrix <- cor(df[, sdg_index_cols], use = "pairwise.complete.obs")

# V·∫Ω heatmap
png("SDG_indices_correlation.png", width = 1000, height = 800)
corrplot(corr_matrix, method = "color", type = "upper", 
         tl.col = "black", tl.srt = 45, addCoef.col = "black",
         col = colorRampPalette(c("blue", "white", "red"))(100))
title("Ma tr·∫≠n t∆∞∆°ng quan gi·ªØa c√°c SDG")
dev.off()

# ƒê√°nh gi√° m·ªëi quan h·ªá
evaluation <- evaluate_correlation(corr_matrix)
cat("\nƒê√°nh gi√° m·ªëi quan h·ªá gi·ªØa c√°c ch·ªâ s·ªë SDG:\n")
for (pair in names(evaluation)) {
  var_names <- strsplit(pair, "_")[[1]]
  cat(sprintf("%s v√† %s: %s\n", var_names[1], var_names[2], evaluation[[pair]]))
}
cat(paste(rep("=", 50), collapse = ""), "\n")
```

# ---------- Feature Engineering ----------
```{r}
# T·∫°o c√°c bi·∫øn t∆∞∆°ng t√°c v·ªõi √Ω nghƒ©a th·ª±c t·∫ø
eps <- 1e-6  # ƒê·ªãnh nghƒ©a epsilon ƒë·ªÉ tr√°nh chia cho 0

df$sdg6_water_elec <- df$sdg6_safewat * df$sdg7_elecac  # N∆∞·ªõc s·∫°ch v√† ƒëi·ªán nƒÉng
df$sdg8_accounts_rdex <- df$sdg8_accounts * df$sdg9_rdex  # T√†i kho·∫£n t√†i ch√≠nh v√† nghi√™n c·ª©u
df$sdg3_uhc_sanitation <- df$sdg3_uhc * df$sdg6_sanita  # B·∫£o hi·ªÉm y t·∫ø v√† v·ªá sinh
df$sdg11_slums_pollprod <- df$sdg11_slums * df$sdg12_pollprod  # Khu ·ªï chu·ªôt v√† √¥ nhi·ªÖm s·∫£n xu·∫•t
df$sdg13_co2_cpta <- df$sdg13_co2gcp * df$sdg15_cpta  # CO2 v√† di·ªán t√≠ch c√¢y tr·ªìng
df$sdg16_cpi_statperf <- df$sdg16_cpi * df$sdg17_statperf  # Tham nh≈©ng v√† hi·ªáu su·∫•t th·ªëng k√™
df$sdg1_income_poverty_ratio <- df$sdg1_wpc / (df$sdg1_lmicpov + eps)  # T·ª∑ l·ªá thu nh·∫≠p v√† ngh√®o ƒë√≥i

# Danh s√°ch c√°c c·ªôt t∆∞∆°ng t√°c
interaction_cols <- c(
  'sdg6_water_elec', 'sdg8_accounts_rdex', 'sdg3_uhc_sanitation',
  'sdg11_slums_pollprod', 'sdg13_co2_cpta', 'sdg16_cpi_statperf',
  'sdg1_income_poverty_ratio'
)

# Hi·ªÉn th·ªã 5 d√≤ng ƒë·∫ßu c·ªßa c√°c ƒë·∫∑c tr∆∞ng t∆∞∆°ng t√°c
cat("5 d√≤ng ƒë·∫ßu c·ªßa c√°c ƒë·∫∑c tr∆∞ng t∆∞∆°ng t√°c:\n")
print(head(df[interaction_cols], 5))
```

# ---------- Bi·∫øn ƒë·ªông th·ªùi gian ----------
```{r}
# T√≠nh t·ªëc ƒë·ªô tƒÉng tr∆∞·ªüng h√†ng nƒÉm (YoY) cho c√°c c·ªôt SDG

# Ch·ªçn c√°c c·ªôt SDG g·ªëc
sdg_cols <- grep("^sdg", names(df), value = TRUE)
sdg_cols <- sdg_cols[!grepl("_yoy$", sdg_cols) & sdg_cols != "sdg3_uhc"]

# T√≠nh ph·∫ßn trƒÉm thay ƒë·ªïi YoY theo t·ª´ng qu·ªëc gia
for (country in unique(df$Country)) {
  country_data <- df[df$Country == country, ]
  country_data <- country_data[order(country_data$year), ]
  
  for (col in sdg_cols) {
    yoy_col <- paste0(col, "_yoy")
    yoy_values <- c(NA, diff(country_data[[col]]) / abs(country_data[[col]][-length(country_data[[col]])]))
    df[df$Country == country, yoy_col] <- yoy_values
  }
}

# L·ªçc d·ªØ li·ªáu cho Vietnam ƒë·ªÉ ki·ªÉm tra
vietnam_df <- df[df$Country == "Vietnam", ]

# Hi·ªÉn th·ªã c√°c c·ªôt li√™n quan (Country, year v√† YoY)
yoy_cols <- grep("_yoy$", names(df), value = TRUE)
cols_to_display <- c("Country", "year", head(yoy_cols, 5))  # Ch·ªâ hi·ªán 5 c·ªôt YoY ƒë·∫ßu ti√™n ƒë·ªÉ ti·∫øt ki·ªám kh√¥ng gian
cat("D·ªØ li·ªáu YoY cho Vietnam (5 d√≤ng ƒë·∫ßu):\n")
print(head(vietnam_df[, cols_to_display], 5))
```

# ---------- Chu·∫©n h√≥a theo nh√≥m SDG ----------
```{r}
# S·ª≠ d·ª•ng MinMaxScaler ƒë·ªÉ chu·∫©n h√≥a c√°c c·ªôt trong m·ªói nh√≥m SDG v·ªÅ [0, 1]

# L·ªçc c√°c c·ªôt SDG g·ªëc
sdg_cols <- grep("^sdg", names(df), value = TRUE)
sdg_cols <- sdg_cols[!grepl("_yoy$", sdg_cols) & sdg_cols != "sdg3_uhc"]

# T·∫°o t·ª´ ƒëi·ªÉn nh√≥m SDG d·ª±a tr√™n prefix (sdg1, sdg2,...)
sdg_groups_from_cols <- list()
for (col in sdg_cols) {
  group <- sub("_.*$", "", col)  # L·∫•y prefix (v√≠ d·ª•: sdg1)
  if (!(group %in% names(sdg_groups_from_cols))) {
    sdg_groups_from_cols[[group]] <- c()
  }
  sdg_groups_from_cols[[group]] <- c(sdg_groups_from_cols[[group]], col)
}

# Chu·∫©n h√≥a MinMax
min_max_scale <- function(x) {
  if (max(x, na.rm = TRUE) == min(x, na.rm = TRUE)) return(x)
  return((x - min(x, na.rm = TRUE)) / (max(x, na.rm = TRUE) - min(x, na.rm = TRUE)))
}

# Chu·∫©n h√≥a t·ª´ng nh√≥m SDG
for (group in names(sdg_groups_from_cols)) {
  cols <- sdg_groups_from_cols[[group]]
  for (col in cols) {
    df[[col]] <- min_max_scale(df[[col]])
  }
  cat(sprintf("ƒê√£ chu·∫©n h√≥a nh√≥m %s v·ªõi c√°c c·ªôt: %s\n", group, paste(cols, collapse = ", ")))
  print(head(df[cols], 5))
  cat(paste(rep("=", 50), collapse = ""), "\n")
}
```

# ---------- Tr·ª±c quan h√≥a ƒë·∫∑c tr∆∞ng m·ªõi ----------
```{r}
# S·ª≠ d·ª•ng pairs ƒë·ªÉ kh√°m ph√° m·ªëi quan h·ªá v√† ph√¢n ph·ªëi c·ªßa c√°c ƒë·∫∑c tr∆∞ng t∆∞∆°ng t√°c

# V·∫Ω pairs plot v·ªõi histogram tr√™n ƒë∆∞·ªùng ch√©o
png("interaction_features_pairs.png", width = 1200, height = 1000)
pairs(df[interaction_cols], main = "Pairwise Scatter Plot of Interaction Features")
dev.off()
```

# ---------- PCA: Gi·∫£m chi·ªÅu d·ªØ li·ªáu ----------
```{r}
# Gi·∫£m chi·ªÅu d·ªØ li·ªáu t∆∞∆°ng t√°c xu·ªëng 2 th√†nh ph·∫ßn ch√≠nh

library(stats)

# Danh s√°ch c√°c c·ªôt t∆∞∆°ng t√°c
interaction_columns <- c(
  'sdg6_water_elec', 'sdg8_accounts_rdex', 'sdg3_uhc_sanitation',
  'sdg11_slums_pollprod', 'sdg13_co2_cpta', 'sdg16_cpi_statperf',
  'sdg1_income_poverty_ratio'
)

# Chu·∫©n h√≥a d·ªØ li·ªáu tr∆∞·ªõc khi √°p d·ª•ng PCA
interaction_data <- scale(df[interaction_columns])

# √Åp d·ª•ng PCA v·ªõi 2 th√†nh ph·∫ßn ch√≠nh
pca_result <- prcomp(interaction_data, center = TRUE, scale. = TRUE)
explained_var <- pca_result$sdev^2 / sum(pca_result$sdev^2)

cat(sprintf("T·ª∑ l·ªá ph∆∞∆°ng sai gi·∫£i th√≠ch: PC1 = %.2f, PC2 = %.2f\n", 
            explained_var[1], explained_var[2]))

# V·∫Ω scatter plot
png("pca_interaction_features.png", width = 800, height = 600)
plot(pca_result$x[,1], pca_result$x[,2], 
     main = "PCA of Interaction Features",
     xlab = sprintf("Principal Component 1 (%.2f%% variance)", explained_var[1]*100),
     ylab = sprintf("Principal Component 2 (%.2f%% variance)", explained_var[2]*100),
     pch = 16, col = "blue")
dev.off()
```

# ---------- Feature Selection ----------
```{r}
# 1. Chu·∫©n b·ªã d·ªØ li·ªáu: ch·ªçn c√°c ƒë·∫∑c tr∆∞ng s·ªë v√† lo·∫°i b·ªè gi√° tr·ªã NaN

numerical_cols <- names(df)[sapply(df, is.numeric)]
df_selection <- df[numerical_cols]

# 2.0 X·ª≠ l√Ω NaN v√† Inf tr∆∞·ªõc khi t√≠nh VIF
cat("\n2.0 X·ª≠ l√Ω NaN v√† Inf:\n")
# Thay th·∫ø Inf b·∫±ng NA
df_selection[sapply(df_selection, is.infinite)] <- NA
# ƒêi·ªÅn NA b·∫±ng gi√° tr·ªã trung b√¨nh c·ªßa c·ªôt
for (col in names(df_selection)) {
  df_selection[[col]][is.na(df_selection[[col]])] <- mean(df_selection[[col]], na.rm = TRUE)
}
# Ki·ªÉm tra l·∫°i NA
if (any(is.na(df_selection)) || any(sapply(df_selection, function(x) any(is.infinite(x))))) {
  cat("C·∫£nh b√°o: V·∫´n c√≤n NA ho·∫∑c Inf trong d·ªØ li·ªáu!\n")
} else {
  cat("D·ªØ li·ªáu ƒë√£ s·∫°ch, kh√¥ng c√≤n NA ho·∫∑c Inf.\n")
}
```

# ---------- Lo·∫°i b·ªè ƒëa tr·ªçng tuy·∫øn (Multicollinearity) b·∫±ng VIF ----------
```{r}
cat("\n2.1 Ki·ªÉm tra ƒëa tr·ªçng tuy·∫øn b·∫±ng VIF:\n")

# H√†m t√≠nh VIF
calculate_vif <- function(df) {
  result <- data.frame(Feature = character(), VIF = numeric())
  # Ch·ªçn c√°c c·ªôt s·ªë v·ªõi √≠t nh·∫•t 30 gi√° tr·ªã kh√°c nhau ƒë·ªÉ tr√°nh l·ªói c·ªông tuy·∫øn ho√†n h·∫£o
  num_cols <- names(df)[sapply(df, function(x) is.numeric(x) && length(unique(x)) > 30)]
  
  for (i in seq_along(num_cols)) {
    # T·∫°o c√¥ng th·ª©c: bi·∫øn hi·ªán t·∫°i ~ t·∫•t c·∫£ bi·∫øn kh√°c
    formula_str <- paste(num_cols[i], "~", paste(num_cols[-i], collapse = " + "))
    
    # Th·ª≠ ch·∫°y m√¥ h√¨nh h·ªìi quy tuy·∫øn t√≠nh
    tryCatch({
      model <- lm(formula = as.formula(formula_str), data = df)
      result <- rbind(result, data.frame(Feature = num_cols[i], VIF = 1/(1 - summary(model)$r.squared)))
    }, error = function(e) {
      result <- rbind(result, data.frame(Feature = num_cols[i], VIF = Inf))
    })
  }
  
  return(result)
}

# T√≠nh VIF cho c√°c bi·∫øn c√≥ ƒë·ªß gi√° tr·ªã kh√°c nhau
vif_data <- calculate_vif(df_selection)
# ---------- L·ªçc c√°c ƒë·∫∑c tr∆∞ng c√≥ VIF < 10 ----------
selected_features_vif <- as.character(vif_data$Feature[vif_data$VIF < 10])
cat("C√°c ƒë·∫∑c tr∆∞ng sau khi lo·∫°i b·ªè ƒëa tr·ªçng tuy·∫øn (VIF < 10):\n")
print(selected_features_vif)
```

# ---------- L·ª±a ch·ªçn ƒë·∫∑c tr∆∞ng v·ªõi L1 Regularization (Lasso) ----------
```{r}
cat("\n2.2 L·ª±a ch·ªçn ƒë·∫∑c tr∆∞ng v·ªõi Lasso:\n")

# Ki·ªÉm tra bi·∫øn m·ª•c ti√™u
if (!("SDG Index Score" %in% names(df_selection))) {
  cat("L·ªói: Kh√¥ng t√¨m th·∫•y 'SDG Index Score'. S·ª≠ d·ª•ng c·ªôt ƒë·∫ßu ti√™n l√†m bi·∫øn m·ª•c ti√™u ƒë·ªÉ minh h·ªça.\n")
  y <- df_selection[[1]]  # Thay th·∫ø b·∫±ng c·ªôt m·ª•c ti√™u th·ª±c t·∫ø
  X <- df_selection[, -1]
} else {
  X <- df_selection[, setdiff(names(df_selection), "SDG Index Score")]
  y <- df_selection[["SDG Index Score"]]
}

# Chuy·ªÉn ƒë·ªïi DataFrame th√†nh ma tr·∫≠n
X_matrix <- as.matrix(X)
y_vector <- as.vector(y)

# Ch·∫°y Lasso v·ªõi CV ƒë·ªÉ t√¨m alpha t·ªëi ∆∞u
set.seed(42)
cv_lasso <- cv.glmnet(X_matrix, y_vector, alpha = 1)
lasso_model <- glmnet(X_matrix, y_vector, alpha = 1, lambda = cv_lasso$lambda.min)

# Tr√≠ch xu·∫•t h·ªá s·ªë ƒë√∫ng c√°ch
lasso_coefs <- coef(lasso_model)
# L·∫•y ch·ªâ s·ªë (indices) c·ªßa c√°c h·ªá s·ªë kh√°c 0
non_zero_indices <- which(as.vector(lasso_coefs) != 0)
# L·∫•y t√™n c·ªßa c√°c ƒë·∫∑c tr∆∞ng c√≥ h·ªá s·ªë kh√°c 0
selected_features_lasso <- rownames(lasso_coefs)[non_zero_indices]
# Lo·∫°i b·ªè h·ªá s·ªë ch·∫∑n (intercept) n·∫øu c√≥
selected_features_lasso <- selected_features_lasso[selected_features_lasso != "(Intercept)"]

cat("C√°c ƒë·∫∑c tr∆∞ng ƒë∆∞·ª£c ch·ªçn b·ªüi Lasso:\n")
print(selected_features_lasso)
```

# ---------- Feature Importance v·ªõi Random Forest ----------
```{r}
cat("\n2.3 Feature Importance v·ªõi Random Forest:\n")

# Ch·∫°y Random Forest
set.seed(42)
rf <- randomForest(x = X_matrix, y = y_vector, ntree = 100, importance = TRUE)

# Tr√≠ch xu·∫•t Feature Importance
feature_importance <- as.data.frame(importance(rf))
feature_importance$Feature <- rownames(feature_importance)
feature_importance <- feature_importance[order(feature_importance$`%IncMSE`, decreasing = TRUE), ]

cat("T·∫ßm quan tr·ªçng ƒë·∫∑c tr∆∞ng t·ª´ Random Forest (Top 20):\n")
print(head(feature_importance[, c("Feature", "%IncMSE")], 20))
```

# ---------- Tr·ª±c quan h√≥a ----------
```{r}
# 3.1 Heatmap t∆∞∆°ng quan
cat("\n3.1 V·∫Ω Heatmap t∆∞∆°ng quan:\n")

# Ch·ªçn top 10 ƒë·∫∑c tr∆∞ng t·ª´ Random Forest
top_features <- head(feature_importance$Feature, 10)

# T√≠nh ma tr·∫≠n t∆∞∆°ng quan ch·ªâ cho top ƒë·∫∑c tr∆∞ng
corr_matrix <- cor(df_selection[, top_features], use = "pairwise.complete.obs")

png("correlation_heatmap_top10.png", width = 1000, height = 800)
corrplot(corr_matrix, method = "color", type = "upper", tl.col = "black",
         tl.srt = 45, addCoef.col = "black", number.cex = 0.7,
         col = colorRampPalette(c("blue", "white", "red"))(100))
title("Correlation Heatmap of Top 10 Features from Random Forest")
dev.off()

# 3.2 Bi·ªÉu ƒë·ªì t·∫ßm quan tr·ªçng ƒë·∫∑c tr∆∞ng t·ª´ Random Forest
cat("\n3.2 V·∫Ω bi·ªÉu ƒë·ªì t·∫ßm quan tr·ªçng ƒë·∫∑c tr∆∞ng:\n")

top10_importance <- head(feature_importance, 10)

png("feature_importance_top10.png", width = 1000, height = 800)
barplot(top10_importance$`%IncMSE`, names.arg = top10_importance$Feature, 
        horiz = TRUE, las = 1, cex.names = 0.7,
        main = "Top 10 Feature Importance from Random Forest",
        xlab = "Importance (%IncMSE)")
dev.off()

# 3.3 PCA cho c√°c ƒë·∫∑c tr∆∞ng
cat("\n3.3 PCA cho c√°c ƒë·∫∑c tr∆∞ng:\n")

# K·∫øt h·ª£p ƒë·∫∑c tr∆∞ng t∆∞∆°ng t√°c v√† top ƒë·∫∑c tr∆∞ng t·ª´ VIF/Lasso
combined_features <- unique(c(interaction_cols, selected_features_vif, selected_features_lasso))
combined_features <- combined_features[1:min(length(combined_features), 15)]  # ch·ªçn top 15

df_combined <- df[, combined_features]

# X·ª≠ l√Ω NA v√† Inf
df_combined[!is.finite(as.matrix(df_combined))] <- NA
df_combined <- as.data.frame(lapply(df_combined, function(x) {
  x[is.na(x)] <- mean(x, na.rm = TRUE)
  return(x)
}))

# PCA
library(caret)
library(ggplot2)

scaled_df <- scale(df_combined)
pca_model <- prcomp(scaled_df, center = TRUE, scale. = TRUE)
summary(pca_model)$importance[2, 1:2]  # T·ª∑ l·ªá ph∆∞∆°ng sai gi·∫£i th√≠ch

# Scatter plot
pca_df <- as.data.frame(pca_model$x)
ggplot(pca_df, aes(PC1, PC2)) +
  geom_point(alpha = 0.5) +
  ggtitle("PCA of Selected Features") +
  xlab(paste0("Principal Component 1 (", round(summary(pca_model)$importance[2, 1] * 100, 2), "%)")) +
  ylab(paste0("Principal Component 2 (", round(summary(pca_model)$importance[2, 2] * 100, 2), "%)"))
```

# ---------- Feature Extraction ----------
```{r}
# 3.1 PCA theo nh√≥m SDG
pca_results <- list()

for (group in names(sdg_groups)) {
  cols <- sdg_groups[[group]]
  df_group <- df[, cols]

  df_group[!is.finite(as.matrix(df_group))] <- NA
  df_group <- as.data.frame(lapply(df_group, function(x) {
    x[is.na(x)] <- mean(x, na.rm = TRUE)
    return(x)
  }))

  if (ncol(df_group) >= 2) {
    scaled <- scale(df_group)
    pca_model <- prcomp(scaled, center = TRUE, scale. = TRUE)
    explained_var <- summary(pca_model)$importance[2, ]
    cumulative_var <- cumsum(explained_var)
    pca_results[[group]] <- list(explained_var = explained_var, cumulative_var = cumulative_var)
    print(paste("SDG Group:", group, "- T·ªïng ph∆∞∆°ng sai:", round(cumulative_var[length(cumulative_var)] * 100, 2), "%"))
  }
}

# 3.2 T-SNE to√†n b·ªô d·ªØ li·ªáu
library(Rtsne)

df_tsne <- df_selection
df_tsne[!is.finite(as.matrix(df_tsne))] <- NA
df_tsne <- as.data.frame(lapply(df_tsne, function(x) {
  x[is.na(x)] <- mean(x, na.rm = TRUE)
  return(x)
}))

scaled_df <- scale(df_tsne)
set.seed(42)
tsne_result <- Rtsne(scaled_df, dims = 2, perplexity = 30, verbose = TRUE)
plot(tsne_result$Y, main = "T-SNE of All Numerical Features", xlab = "T-SNE 1", ylab = "T-SNE 2", pch = 19, col = "blue")

```
```{r}
# 4. Tr·ª±c quan h√≥a 
# 4.1 Heatmap t∆∞∆°ng quan top 10 ƒë·∫∑c tr∆∞ng
library(corrplot)

top_features <- head(feature_importance$Feature, 10)
corr_matrix <- cor(df_selection[, top_features])
corrplot(corr_matrix, method = "color", title = "Top 10 Features Correlation Heatmap", tl.col = "black")

# 4.2 Barplot t·∫ßm quan tr·ªçng
# First, let's examine the structure of feature_importance to see actual column names
print(names(feature_importance))

# Assuming the importance column might be named differently (e.g., "importance" lowercase or "MeanDecreaseGini")
# Let's adapt the code to use whatever column contains the importance values
importance_col <- names(feature_importance)[2]  # Assuming importance is in the second column

ggplot(top_imp, aes(x = reorder(Feature, .data[[importance_col]]), y = .data[[importance_col]])) +
  geom_col(fill = "skyblue") +
  coord_flip() +
  ggtitle("Top 10 Feature Importance from Random Forest") +
  xlab("Features") +
  ylab("Importance")
  
# # 4.2 Barplot t·∫ßm quan tr·ªçng
# top_imp <- head(feature_importance, 10)
# ggplot(top_imp, aes(x = reorder(Feature, Importance), y = Importance)) +
#   geom_col(fill = "skyblue") +
#   coord_flip() +
#   ggtitle("Top 10 Feature Importance from Random Forest")

# 4.3 Ph∆∞∆°ng sai t√≠ch l≈©y theo nh√≥m
for (group in names(pca_results)) {
  var <- pca_results[[group]]$cumulative_var
  plot(var, type = "o", main = paste("Cumulative Explained Variance -", group),
       xlab = "Number of Components", ylab = "Cumulative Variance", ylim = c(0, 1))
}

# 4.4 T-SNE Scatter
tsne_df <- as.data.frame(tsne_result$Y)
ggplot(tsne_df, aes(x = V1, y = V2)) +
  geom_point(alpha = 0.5) +
  ggtitle("T-SNE of All Numerical Features") +
  xlab("T-SNE Component 1") +
  ylab("T-SNE Component 2")
```
